# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: siemprepe-test-api # NOTE: update this with your service name

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  secrets: ${file(secrets.json)}
  usersTableName: 'users-table-${self:provider.stage}'
  parkingsTableName: 'parkings-table-${self:provider.stage}'
  reservationsTableName: 'reservations-table-${self:provider.stage}'
  dynamodb:
    start:
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: 'users-table-${self:provider.stage}'
            sources: [./data/test-users.json]
          - table: 'parkings-table-${self:provider.stage}'
            sources: [./data/test-parkings.json]
          - table: 'reservations-table-${self:provider.stage}'
            sources: [./data/test-reservations.json]

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-3
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    PARKINGS_TABLE: ${self:custom.parkingsTableName}
    RESERVATIONS_TABLE: ${self:custom.reservationsTableName}
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}

functions:
  verify-token:
    handler: auth/VerifyToken.auth
  register:
    handler: auth/AuthHandler.handler
    events:
      - http:
          path: register
          method: post
          cors: true
  login:
    handler: auth/AuthHandler.handler
    events:
      - http:
          path: login
          method: post
          cors: true
  testuser:
    handler: auth/AuthHandler.handler
    events:
      - http:
          path: testuser
          method: get
          cors: true
          authorizer: verify-token
  getParkings:
    handler: parkings/ParkingsHandler.handler
    events:
      - http:
          path: parkings
          method: get
          cors: true
  addParking:
    handler: parkings/ParkingsHandler.handler
    events:
      - http:
          path: parkings
          method: post
          cors: true
  getReservations:
    handler: reservations/ReservationsHandler.handler
    events:
      - http:
          path: reservations/{proxy+}
          method: get
          cors: true
  addReservation:
    handler: reservations/ReservationsHandler.handler
    events:
      - http:
          path: reservations
          method: post
          cors: true

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.usersTableName}
    ParkingsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: parkingId
            AttributeType: S
        KeySchema:
          -
            AttributeName: parkingId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.parkingsTableName}
    ReservationsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: parkingId
            AttributeType: S
          -
            AttributeName: reservationDate
            AttributeType: S
        KeySchema:
          -
            AttributeName: parkingId
            KeyType: HASH
          -
            AttributeName: reservationDate
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.reservationsTableName}
